// c언어 사용 예시
구조체 : 서로 관련이 있는 데이터를 하나로 묶어놓은 기능
<구조체 정의>
typeof struct person{
	char name[10];
	int ko;
	int en;
	int ma;
	boolean gender;
}

<구조체 선언>
person ps;
ps.name = {'h','o','n','g'};
ps.ko = 90;
ps.en = 80;
ps.ma = 70;
ps.gender = true;

================================

객체 : 실세계에 존재하는 모든 사물이나 개념들. 실세계(자동차, 모니터, 책) / 개념(수강, 추리)
객체 모델링 : 객체의 특징(속성)과 기능(동작)을 구분한다.(객체를 프로그램으로 구현하기 위한 분석작업이다.)

예)
홍길동
객체의 특징(속성) : 이름(홍길동), 나이(30), 성별(남)
객체의 기능(동작) : 개발한다. 달린다.

클래스(class) : 구조체(멤버면수) + 함수(메소드)
			  => 객체의 공통점을 찾아내어 그 공통점을 표현하는 것.

class Person{
   String name;
   int age;
   char gender;
   
   public void develop(){
     System.out.println("개발한다");
   }
   
   public void run(){
     System.out.println("달린다");
   }
 
 } 
 
 <객체참조변수 선언>
 person ps;
 <객체 생성> // 생성자 호출. 생성자 명은 클래스 명과 같아야 한다. new를 붙여야 한다.(메모리 확보가 됨)
 ps = new Person();
 ps.name = "홍길동";
 ps.age = 30;
 ps.gender = '남';
 ps.develop();
 ps.run();

 ===========================================
 
 자바바이트코드 = class파일을 의미
 class 생성시 Method Area에 생성
 class 생성을 할때 Static 작성시 정적필드로 만듬
 객체참조변수 생성 및 선언시 Stack Area에 생성 및 데이터 주소 가져옴
 class안의 데이터 값들은 Heap Area에 데이터 생성 및 주소 할당
 
 JVM (Java Virtual Machine) 메모리 구조 Runtime Data Area
 1. Method Area : 클래스의 정보, 메소드 바이트 코드, 클래스변수(static...), 상수(final)
 2. Stack Area : 지역변수, 매개변수, 객체참조변수
 3. Heap Area : 클래스, 배열, enum
 
 자바프로그램의 특징
 1. 플랫폼에 독립적
 2. 자동으로 메모리 관리(가비지 컬렉션에서 관리 - pc 레지스터)
 3. 네트워크와 분산환경 지원
 4. 멀티스레드 지원